plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.bdgame.loadlayout'
    compileSdk 33

    defaultConfig {
        applicationId "com.bdgame.loadlayout"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.3'
    }
    packaging {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    sourceSets {
        main {
            assets.srcDirs += ['src/main/assets']
            java.srcDirs += ['src/main/generated']
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.activity:activity-compose:1.7.2'
    implementation platform('androidx.compose:compose-bom:2023.03.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.fragment:fragment-ktx:1.3.6'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.multidex:multidex:2.0.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation platform('androidx.compose:compose-bom:2023.03.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
}

afterEvaluate {
    preBuild.dependsOn generateDynamicLayout
}

task generateDynamicLayout(type: GenerateDynamicLayoutTask) {
    group = 'Custom Tasks'
    inputFilePath = file('src/main/assets/layout.txt')
    outputDirectory = file('src/main/java/com/bdgame/loadlayout/layout')
}

class GenerateDynamicLayoutTask extends DefaultTask {
    @InputFile
    File inputFilePath
    @OutputDirectory
    File outputDirectory

    @TaskAction
    void generateKotlinFile() {
        String inputFileContent = inputFilePath.text
        String packageName = "com.bdgame.loadlayout.layout"
        def kotlinCode =
                """package $packageName

$inputFileContent
"""
        File outputFile = new File(outputDirectory, "DynamicLayout.kt")
        outputFile.text = kotlinCode
        outputFile.createNewFile()
    }
}

apply from: "../pushFile.gradle"
task updateLayout {
    group = 'Custom Tasks'
    doLast {
        println "start UpdateLayout"
        def adb = getAdb()
        if (null == adb) {
            println("UpdateLayout plugin so not found adb")
            return
        }
        println "adb $adb"
        def devices = getAdbDevices(adb)
        if (null == devices) {
            println("UpdateLayout plugin so not found devices")
            return
        }
        println "devices $devices"
        def rootDir = project.rootDir
        println "rootDir $rootDir"
        def layoutFile = new File(rootDir, "layout.txt")
        if (!layoutFile.exists()){
            println("UpdateLayout plugin not found layoutFile")
            return
        }
        devices.each { device ->
            def internalLayoutPath = "files/layout"
            pushFileToDeviceData(adb, device, "com.bdgame.loadlayout",layoutFile.absolutePath, internalLayoutPath, layoutFile.name)
            exec {
                commandLine "$adb", "-s", "$device", "shell", "am", "broadcast","-a","com.bdgame.loadlayout.UPATE_LAYOUT",
                        "com.bdgame.loadlayout"
                ignoreExitValue true
            }
        }
    }
}